///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Spar.Test_cases.Landing.Locations
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Location_ShowOpenOnly recording.
    /// </summary>
    [TestModule("754ccd8d-899d-4bd6-8fa7-04d70ab6827a", ModuleType.Recording, 1)]
    public partial class Location_ShowOpenOnly : ITestModule
    {
        /// <summary>
        /// Holds an instance of the Spar.SparRepository repository.
        /// </summary>
        public static Spar.SparRepository repo = Spar.SparRepository.Instance;

        static Location_ShowOpenOnly instance = new Location_ShowOpenOnly();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Location_ShowOpenOnly()
        {
            AEhight = "";
            ItemNext = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Location_ShowOpenOnly Instance
        {
            get { return instance; }
        }

#region Variables

        string _AEhight;

        /// <summary>
        /// Gets or sets the value of variable AEhight.
        /// </summary>
        [TestVariable("73d377a6-ee4a-4888-bdef-d3f956a67e15")]
        public string AEhight
        {
            get { return _AEhight; }
            set { _AEhight = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable ItemNum.
        /// </summary>
        [TestVariable("4c23dbd2-adf2-4497-bbd0-ceb77e5b1c7f")]
        public string ItemNum
        {
            get { return repo.ItemNum; }
            set { repo.ItemNum = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable ItemNext.
        /// </summary>
        [TestVariable("114b632e-14de-479f-b761-65f9c35bf280")]
        public string ItemNext
        {
            get { return repo.ItemNext; }
            set { repo.ItemNext = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            MergedUserCodeMethod(repo.PlusSparSi.MainActivity.Locations.RStringShopsActionbarTitleInfo, repo.PlusSparSi.MainActivity.Locations.RStringShopShowOnlyOpenInfo, repo.PlusSparSi.MainActivity.Locations.SwShowOnlyOpenInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PlusSparSi.MainActivity.Locations.SwShowOnlyOpen' at Center", repo.PlusSparSi.MainActivity.Locations.SwShowOnlyOpenInfo, new RecordItemIndex(1));
            repo.PlusSparSi.MainActivity.Locations.SwShowOnlyOpen.Touch();
            Delay.Milliseconds(500);
            
            //SetItemNum();
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Invoke Action", "Invoking Focus() on item 'PlusSparSi.MainActivity.Locations.RecyclerView_Items'.", repo.PlusSparSi.MainActivity.Locations.RecyclerView_ItemsInfo, new RecordItemIndex(3));
            //repo.PlusSparSi.MainActivity.Locations.RecyclerView_Items.Focus();
            //Delay.Milliseconds(0);
            
            //CheckCellHeight();
            //Delay.Milliseconds(0);
            
            //VerifyShowOnlyOpen();
            //Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
