///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace Spar.Test_cases.Landing
{
	public partial class News_Overview
	{
		/// <summary>
		/// This method gets called right after the recording has been started.
		/// It can be used to execute recording specific initialization code.
		/// </summary>
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

		public void FindNews()
		{
			
			int tryNum = 0;
			bool exists = false;
			
			while(tryNum < 6 && !exists){
				
				tryNum++;
				repo.PlusSparSi.SearchTimeout = new Duration(1500);
				repo.PlusSparSi.MainActivity.SearchTimeout = new Duration(1500);
				repo.PlusSparSi.MainActivity.ImgNewsInfo.SearchTimeout = new Duration(1000);
				
				exists = repo.PlusSparSi.MainActivity.ImgNewsInfo.Exists();
				
				if(!exists){
					Report.Log(ReportLevel.Info, "Info", "TryNum: " + tryNum);
					repo.PlusSparSi.MainActivity.Self.Swipe(Location.Center, ValueConverter.ArgumentFromString<Ranorex.Core.Recorder.Touch.GestureDirection>("SwipeDirection", "Up (270°)"), ValueConverter.ArgumentFromString<Ranorex.Core.Distance>("Distance", "0.5"), ValueConverter.ArgumentFromString<Ranorex.Duration>("SwipeDuration", "500ms"), 0);
					Delay.Milliseconds(500);
				}else
					break;
			}
		}

        public void MergedUserCodeMethod(RepoItemInfo textInfo, RepoItemInfo textInfo1, RepoItemInfo textInfo2)
        {
			Delay.Duration(3000, false);
			repo.PlusSparSi.SearchTimeout = new Duration(1000);
			repo.PlusSparSi.MainActivity.SearchTimeout = new Duration(1000);
			repo.PlusSparSi.MainActivity.News1_TitleInfo.SearchTimeout = new Duration(1500);
			repo.PlusSparSi.MainActivity.News2_TitleInfo.SearchTimeout = new Duration(1500);
			repo.PlusSparSi.MainActivity.News3_TitleInfo.SearchTimeout = new Duration(1500);
			
			if(repo.PlusSparSi.MainActivity.News1_TitleInfo.Exists()){
				
				Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$News1Title) on item 'textInfo'.", textInfo);
				Validate.Attribute(textInfo, "Text", News1Title);
				
			}else{
				
				Report.Log(ReportLevel.Info, "Touch Gestures", "Swipe gesture with direction 'Up (270°)' starting from 'Center' with distance from variable $SwipeHeight with swipe duration'1s' and step count '0' on item 'containerInfo'.", repo.PlusSparSi.MainActivity.FragmentStackLandingInfo);
				repo.PlusSparSi.MainActivity.FragmentStackLandingInfo.FindAdapter<Container>().Swipe(Ranorex.Location.LowerCenter, ValueConverter.ArgumentFromString<Ranorex.Core.Recorder.Touch.GestureDirection>("SwipeDirection", "Up (270°)"), ValueConverter.ArgumentFromString<Ranorex.Core.Distance>("Distance", "0.25"), ValueConverter.ArgumentFromString<Ranorex.Duration>("SwipeDuration", "1s"), 0);
				
				Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$News1Title) on item 'textInfo'.", textInfo);
				Validate.Attribute(textInfo, "Text", News1Title);
			}
			
			if(repo.PlusSparSi.MainActivity.News2_TitleInfo.Exists()){
				
				Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$News2Title) on item 'textInfo1'.", textInfo1);
				Validate.Attribute(textInfo1, "Text", News2Title);
				
			}else{
				
				Report.Log(ReportLevel.Info, "Touch Gestures", "Swipe gesture with direction 'Up (270°)' starting from 'Center' with distance from variable $SwipeHeight with swipe duration'1s' and step count '0' on item 'containerInfo'.", repo.PlusSparSi.MainActivity.FragmentStackLandingInfo);
				repo.PlusSparSi.MainActivity.FragmentStackLandingInfo.FindAdapter<Container>().Swipe(Ranorex.Location.LowerCenter, ValueConverter.ArgumentFromString<Ranorex.Core.Recorder.Touch.GestureDirection>("SwipeDirection", "Up (270°)"), ValueConverter.ArgumentFromString<Ranorex.Core.Distance>("Distance", "0.25"), ValueConverter.ArgumentFromString<Ranorex.Duration>("SwipeDuration", "1s"), 0);
				
				Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$News2Title) on item 'textInfo1'.", textInfo1);
				Validate.Attribute(textInfo1, "Text", News2Title);
			}
			
			if(repo.PlusSparSi.MainActivity.News3_TitleInfo.Exists()){
				
				Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$News3Title) on item 'textInfo2'.", textInfo2);
				Validate.Attribute(textInfo2, "Text", News3Title);
				
			}else{
				
				Report.Log(ReportLevel.Info, "Touch Gestures", "Swipe gesture with direction 'Up (270°)' starting from 'Center' with distance from variable $SwipeHeight with swipe duration'1s' and step count '0' on item 'containerInfo'.", repo.PlusSparSi.MainActivity.FragmentStackLandingInfo);
				repo.PlusSparSi.MainActivity.FragmentStackLandingInfo.FindAdapter<Container>().Swipe(Ranorex.Location.LowerCenter, ValueConverter.ArgumentFromString<Ranorex.Core.Recorder.Touch.GestureDirection>("SwipeDirection", "Up (270°)"), ValueConverter.ArgumentFromString<Ranorex.Core.Distance>("Distance", "0.25"), ValueConverter.ArgumentFromString<Ranorex.Duration>("SwipeDuration", "1s"), 0);
				
				Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$News3Title) on item 'textInfo2'.", textInfo2);
				Validate.Attribute(textInfo2, "Text", News3Title);
			}
        }

	}
}
