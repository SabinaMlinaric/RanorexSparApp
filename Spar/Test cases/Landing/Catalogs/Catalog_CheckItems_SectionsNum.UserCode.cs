///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq.Expressions;
using System.Net.Http;
using System.Runtime.Serialization.Json;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;
using Spar.Test_cases.Utility;
using Spar.Test_cases.Utility.C_.Classes;

namespace Spar.Test_cases.Landing.Catalogs
{
	public partial class Catalog_CheckItems_SectionsNum
	{
		/// <summary>
		/// This method gets called right after the recording has been started.
		/// It can be used to execute recording specific initialization code.
		/// </summary>
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

		public void GetValidToken()
		{
			Task<HttpResponseInfo> response = HttpClientMethod.GetAsync("http://10.10.1.33:9090/api/Catalog/token",null,"application/json");
			
			HttpResponseInfo message = response.Result;
			
			if(message.StatusCode == 200){
				
				Token token = new Token();
				
				token = HttpClientMethod.Deserialize<Token>(message.Content);
				accessToken = token.access_token;
				
				Report.Log(ReportLevel.Info, "Access token", accessToken);
			}else
				Report.Log(ReportLevel.Failure, "Failed", "Status: " + message.StatusCode + ", message: " + message.Content.ToString());
			
		}

        public void CheckNumOfCatalogs()
        {
            Task<HttpResponseInfo> response = HttpClientMethod.GetAsync("http://10.10.1.33:9090/api/Catalog",accessToken,"application/json");
			
			HttpResponseInfo message = response.Result;
			
			if(message.StatusCode == 200){
				
				
				
				Report.Log(ReportLevel.Info, "Access token", accessToken);
			}else
				Report.Log(ReportLevel.Warn, "Failed", "Status: " + message.StatusCode + ", message: " + message.Content.ToString());
        }

	}
}
