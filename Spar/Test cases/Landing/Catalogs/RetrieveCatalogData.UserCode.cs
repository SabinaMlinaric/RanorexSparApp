///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq.Expressions;
using System.Net.Http;
using System.Runtime.Serialization.Json;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using WinForms = System.Windows.Forms;
using Newtonsoft.Json.Linq;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;
using Spar.Test_cases.Utility;
using Spar.Test_cases.Utility.C_.Classes;

namespace Spar.Test_cases.Landing.Catalogs
{
	public partial class RetrieveCatalogData
	{
		/// <summary>
		/// This method gets called right after the recording has been started.
		/// It can be used to execute recording specific initialization code.
		/// </summary>
		/// 
		
		public Catalog catalog = new Catalog();
		
		// List
		public Ranorex.Text tv_expired;
		public Ranorex.Text tv_title;
		public Ranorex.Text tv_quantity;
		public Ranorex.Text btn_add;
		public Ranorex.Picture img_promotion;
		public Ranorex.Container fullPrice;
		public Ranorex.Text price_bottom_info_top;
		public Ranorex.Text price_bottom_info_bottom;
		public Ranorex.Picture img_price_spar_plus;
		public Ranorex.Text tv_price_main_row_2;
		public Ranorex.Text tv_price_prefix;
		public Ranorex.Text tv_percentage;
		public Ranorex.Text tv_price_main_row_3;
		public Ranorex.Text tv_price_info_bottom_1;
		public Ranorex.Text tv_price_integer;
		public Ranorex.Text tv_price_decimal;
		public Ranorex.Text tv_highlight;
		
		//Details
		public Ranorex.Picture img_picture;
		public Ranorex.Text tv_price_main_row_1;
		public Ranorex.Text tv_free_text_1;
		public Ranorex.Text tv_free_text_2;
		public Ranorex.Text tv_free_text_3;
		public Ranorex.Text tv_term_conditions;
		public Ranorex.Picture img_brand_logo_1;
		public Ranorex.Picture img_brand_logo_2;
		public Ranorex.Picture img_brand_logo_3;
		public Ranorex.Text tv_stores_type_1;
		public Ranorex.Text tv_stores_type_2;
		public Ranorex.Text tv_stores_type_3;
		public Ranorex.Text btn_share;
		
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

		public void GetCatalogData()
		{
			
			Task<HttpResponseInfo> response = HttpClientMethod.GetAsync("http://10.82.2.171:8000/api/Catalog",accessToken,"application/json");
			
			HttpResponseInfo message = response.Result;
			
			if(message.StatusCode == 200){
				
				catalog = HttpClientMethod.Deserialize<Catalog>(message.Content);
				
				if(catalog != null)
				{
					ValidateItem();
				}
			}
			else
			{
				Report.Log(ReportLevel.Warn, "Failed", "Status: " + message.StatusCode + ", message: " + message.Content.ToString());
				
				MockCatalog();
				
				ValidateItem();
			}
		}
		
		public void ValidateItem()
		{
			IList<Text> texts = repo.PlusSparSi.MainActivity.SlidingTabLayout.FindChildren<Text>();
			int textsSum = texts.Count;
			LastSection = textsSum.ToString();
			
			string lastSection = repo.PlusSparSi.MainActivity.SlidingTabLayout_LastButtonText.TextValue;
			
			int num = 0;
			Ranorex.AndroidElement androidElement = repo.PlusSparSi.MainActivity.Items;
			
			int elementsNum = androidElement.Children.Count;
			IList<Ranorex.Container> list = androidElement.FindChildren<Ranorex.Container>();
			
			for(int i = 0; i<3; i++){
				
				Ranorex.Container firstCont = null;
				firstCont = repo.PlusSparSi.MainActivity.Catalog;
				if(firstCont.Type == "Frame"){
					
					Ranorex.Container cont1 = null;
					cont1 =	repo.PlusSparSi.MainActivity.Catalog;
					Report.Log(ReportLevel.Info, "Container", num + "");
					
					retrieveElementsFromListView(cont1);
					checkListContainer(cont1, num);
					
					Report.Log(ReportLevel.Info, "Touch", "Touch item 'cont' at Center");
					cont1.Touch();
					Delay.Milliseconds(500);
					
					retrieveElementsFromDetailsView();
					checkDetailsContainer(cont1, num);
					
					Report.Log(ReportLevel.Info, "Touch", "Touch item 'PlusSparSi.MainActivity.NavigateUp' at Center", repo.PlusSparSi.MainActivity.NavigateUpInfo, new RecordItemIndex(2));
					repo.PlusSparSi.MainActivity.NavigateUp.Touch();
					Delay.Milliseconds(500);
					
					resetFields();
					num++;
					
					Ranorex.Container cont2 = null;
					cont2 = repo.PlusSparSi.MainActivity.Location;
					Report.Log(ReportLevel.Info, "Container", num + "");
					
					retrieveElementsFromListView(cont2);
					checkListContainer(cont2, num);
					
					Report.Log(ReportLevel.Info, "Touch", "Touch item 'cont' at Center");
					cont2.Touch();
					Delay.Milliseconds(500);
					
					retrieveElementsFromDetailsView();
					checkDetailsContainer(cont2, num);
					
					Report.Log(ReportLevel.Info, "Touch", "Touch item 'PlusSparSi.MainActivity.NavigateUp' at Center", repo.PlusSparSi.MainActivity.NavigateUpInfo, new RecordItemIndex(2));
					repo.PlusSparSi.MainActivity.NavigateUp.Touch();
					Delay.Milliseconds(500);
					
					resetFields();
					num++;
					
					Ranorex.Container cont3 = null;
					cont3 =	repo.PlusSparSi.MainActivity.News;
					Report.Log(ReportLevel.Info, "Container", num + "");
					
					retrieveElementsFromListView(cont3);
					checkListContainer(cont3, num);
					
					Report.Log(ReportLevel.Info, "Touch", "Touch item 'cont' at Center");
					cont3.Touch();
					Delay.Milliseconds(500);
					
					retrieveElementsFromDetailsView();
					checkDetailsContainer(cont3, num);
					
					Report.Log(ReportLevel.Info, "Touch", "Touch item 'PlusSparSi.MainActivity.NavigateUp' at Center", repo.PlusSparSi.MainActivity.NavigateUpInfo, new RecordItemIndex(2));
					repo.PlusSparSi.MainActivity.NavigateUp.Touch();
					Delay.Milliseconds(500);
					
					resetFields();
					num++;
					
					Ranorex.Container cont4 = null;
					cont4 = repo.PlusSparSi.MainActivity.FourthCont;
					Report.Log(ReportLevel.Info, "Container", num + "");
					
					retrieveElementsFromListView(cont4);
					checkListContainer(cont4, num);
					
					Report.Log(ReportLevel.Info, "Touch", "Touch item 'cont' at Center");
					cont4.Touch();
					Delay.Milliseconds(500);
					
					retrieveElementsFromDetailsView();
					checkDetailsContainer(cont4, num);
					
					Report.Log(ReportLevel.Info, "Touch", "Touch item 'PlusSparSi.MainActivity.NavigateUp' at Center", repo.PlusSparSi.MainActivity.NavigateUpInfo, new RecordItemIndex(2));
					repo.PlusSparSi.MainActivity.NavigateUp.Touch();
					Delay.Milliseconds(500);
					
					resetFields();
					num++;
					
					Report.Log(ReportLevel.Info, "Touch Gestures", "Swipe gesture with direction 'Up (270°)' starting from 'Center' with distance '1.0' with swipe duration'500ms' and step count '0' on item 'PlusSparSi.MainActivity.Location'.", repo.PlusSparSi.MainActivity.LocationInfo, new RecordItemIndex(2));
					repo.PlusSparSi.MainActivity.FourthCont.Swipe(Ranorex.Location.Center, ValueConverter.ArgumentFromString<Ranorex.Core.Recorder.Touch.GestureDirection>("SwipeDirection", "Up (270°)"), ValueConverter.ArgumentFromString<Ranorex.Core.Distance>("Distance", "1.05"), ValueConverter.ArgumentFromString<Ranorex.Duration>("SwipeDuration", "250ms"), 0);
					Delay.Milliseconds(5000);
				}
				else{
					
					Ranorex.Container cont2 = null;
					cont2 = repo.PlusSparSi.MainActivity.Location;
					Report.Log(ReportLevel.Info, "Container", num + "");
					
					retrieveElementsFromListView(cont2);
					checkListContainer(cont2, num);
					
					Report.Log(ReportLevel.Info, "Touch", "Touch item 'cont' at Center");
					cont2.Touch();
					Delay.Milliseconds(500);
					
					retrieveElementsFromDetailsView();
					checkDetailsContainer(cont2, num);
					
					Report.Log(ReportLevel.Info, "Touch", "Touch item 'PlusSparSi.MainActivity.NavigateUp' at Center", repo.PlusSparSi.MainActivity.NavigateUpInfo, new RecordItemIndex(2));
					repo.PlusSparSi.MainActivity.NavigateUp.Touch();
					Delay.Milliseconds(500);
					
					resetFields();
					num++;
					
					Report.Log(ReportLevel.Info, "Container", num + "");
					
					Ranorex.Container cont3 = null;
					cont3 = repo.PlusSparSi.MainActivity.News;
					
					retrieveElementsFromListView(cont3);
					checkListContainer(cont3, num);
					
					Report.Log(ReportLevel.Info, "Touch", "Touch item 'cont' at Center");
					cont3.Touch();
					Delay.Milliseconds(500);
					
					retrieveElementsFromDetailsView();
					checkDetailsContainer(cont3, num);
					
					Report.Log(ReportLevel.Info, "Touch", "Touch item 'PlusSparSi.MainActivity.NavigateUp' at Center", repo.PlusSparSi.MainActivity.NavigateUpInfo, new RecordItemIndex(2));
					repo.PlusSparSi.MainActivity.NavigateUp.Touch();
					Delay.Milliseconds(500);
					
					resetFields();
					num++;
					
					Report.Log(ReportLevel.Info, "Container", num + "");
					
					Ranorex.Container cont4 = null;
					cont4 = repo.PlusSparSi.MainActivity.FourthCont;
					
					retrieveElementsFromListView(cont4);
					checkListContainer(cont4, num);
					
					Report.Log(ReportLevel.Info, "Touch", "Touch item 'cont' at Center");
					cont4.Touch();
					Delay.Milliseconds(500);
					
					retrieveElementsFromDetailsView();
					checkDetailsContainer(cont4, num);
					
					Report.Log(ReportLevel.Info, "Touch", "Touch item 'PlusSparSi.MainActivity.NavigateUp' at Center", repo.PlusSparSi.MainActivity.NavigateUpInfo, new RecordItemIndex(2));
					repo.PlusSparSi.MainActivity.NavigateUp.Touch();
					Delay.Milliseconds(500);
					
					resetFields();
					num++;
					
					Report.Log(ReportLevel.Info, "Container", num + "");
					
					Ranorex.Container cont5 = null;
					cont5 = repo.PlusSparSi.MainActivity.FourthCont;
					
					retrieveElementsFromListView(cont5);
					checkListContainer(cont5, num);
					
					Report.Log(ReportLevel.Info, "Touch", "Touch item 'cont' at Center");
					cont5.Touch();
					Delay.Milliseconds(500);
					
					retrieveElementsFromDetailsView();
					checkDetailsContainer(cont5, num);
					
					Report.Log(ReportLevel.Info, "Touch", "Touch item 'PlusSparSi.MainActivity.NavigateUp' at Center", repo.PlusSparSi.MainActivity.NavigateUpInfo, new RecordItemIndex(2));
					repo.PlusSparSi.MainActivity.NavigateUp.Touch();
					Delay.Milliseconds(500);
					
					resetFields();
					num++;
					
					Report.Log(ReportLevel.Info, "Touch Gestures", "Swipe gesture with direction 'Up (270°)' starting from 'Center' with distance '1.0' with swipe duration'500ms' and step count '0' on item 'PlusSparSi.MainActivity.Location'.", repo.PlusSparSi.MainActivity.LocationInfo, new RecordItemIndex(2));
					repo.PlusSparSi.MainActivity.Location.Swipe(Ranorex.Location.Center, ValueConverter.ArgumentFromString<Ranorex.Core.Recorder.Touch.GestureDirection>("SwipeDirection", "Up (270°)"), ValueConverter.ArgumentFromString<Ranorex.Core.Distance>("Distance", "1.1"), ValueConverter.ArgumentFromString<Ranorex.Duration>("SwipeDuration", "250ms"), 0);
					Delay.Milliseconds(5000);
				}
			}
		}
		
		public void resetFields()
		{
			// List
			tv_expired = null;
			tv_title = null;
			tv_quantity = null;
			btn_add = null;
			img_promotion = null;
			fullPrice = null;
			price_bottom_info_top = null;
			price_bottom_info_bottom = null;
			img_price_spar_plus = null;
			tv_price_main_row_2 = null;
			tv_price_prefix = null;
			tv_percentage = null;
			tv_price_main_row_3 = null;
			tv_price_info_bottom_1 = null;
			tv_price_integer = null;
			tv_price_decimal = null;
			tv_highlight = null;
			
			//Details
			img_picture = null;
			tv_price_main_row_1 = null;
			tv_free_text_1 = null;
			tv_free_text_2 = null;
			tv_free_text_3 = null;
			tv_term_conditions = null;
			img_brand_logo_1 = null;
			img_brand_logo_2 = null;
			img_brand_logo_3 = null;
			tv_stores_type_1 = null;
			tv_stores_type_2 = null;
			tv_stores_type_3 = null;
			btn_share = null;
		}
		
		public void checkDetailsContainer(Ranorex.Container cont, int num)
		{
			if(catalog.categories[0].items[num].promoTitle != null){
				checkElement(tv_title, catalog.categories[0].items[num].promoTitle);
			}
			if(catalog.categories[0].items[num].promoDescription != null){
				checkElement(tv_quantity, catalog.categories[0].items[num].promoDescription);
			}
			if(catalog.categories[0].items[num].promoPicture != null){
				checkVisible(img_picture.As<Ranorex.Unknown>(), true);
			}
			if(catalog.categories[0].items[num].promoPrice != null){
				checkElement(tv_price_integer, catalog.categories[0].items[num].promoPrice.integer + "");
				if(catalog.categories[0].items[num].promoPrice.fraction != 0){
					checkElement(tv_price_decimal, catalog.categories[0].items[num].promoPrice.fraction + "");
				}else{
					checkElement(tv_price_decimal, "00");
				}
			}
			if(catalog.categories[0].items[num].promoPercentage != null){
				checkElement(tv_percentage, catalog.categories[0].items[num].promoPercentage);
			}
			if(catalog.categories[0].items[num].promoHighlight != null){
				checkElement(tv_quantity, catalog.categories[0].items[num].promoHighlight);
			}
			if(catalog.categories[0].items[num].promoMainRow1 != null){
				checkElement(tv_price_main_row_1, catalog.categories[0].items[num].promoMainRow1);
			}
			if(catalog.categories[0].items[num].promoMainRow2 != null){
				checkElement(tv_price_main_row_2, catalog.categories[0].items[num].promoMainRow2);
			}
			if(catalog.categories[0].items[num].promoMainRow3 != null){
				checkElement(tv_price_main_row_3, catalog.categories[0].items[num].promoMainRow3);
			}
			checkVisible(img_price_spar_plus.As<Ranorex.Unknown>(), catalog.categories[0].items[num].sparPlus);
			if(catalog.categories[0].items[num].promoInfoBottom1 != null){
				checkElement(price_bottom_info_top, catalog.categories[0].items[num].promoInfoBottom1);
			}
			if(catalog.categories[0].items[num].promoInfoBottom2 != null){
				checkElement(price_bottom_info_bottom, catalog.categories[0].items[num].promoInfoBottom2);
			}
			if(catalog.categories[0].items[num].promoValidFrom != null && catalog.categories[0].items[num].promoValidTo != null)
			{
				System.DateTime startDate = Convert.ToDateTime(catalog.categories[0].items[num].promoValidFrom);
				System.DateTime endDate = Convert.ToDateTime(catalog.categories[0].items[num].promoValidTo);
				
				if(checkExpiredDate(startDate,endDate))
				{
					checkVisible(tv_stores_type_1.As<Ranorex.Unknown>(), catalog.categories[0].items[num].storesType1);
					checkVisible(tv_stores_type_2.As<Ranorex.Unknown>(), catalog.categories[0].items[num].storesType2);
					checkVisible(tv_stores_type_3.As<Ranorex.Unknown>(), catalog.categories[0].items[num].storesType3);
					checkVisible(btn_share.As<Ranorex.Unknown>(), catalog.categories[0].items[num].shareable);
				}
			}
			if(catalog.categories[0].items[num].freeText1 != null){
				checkElement(tv_free_text_1, catalog.categories[0].items[num].freeText1);
			}
			if(catalog.categories[0].items[num].freeText2 != null){
				checkElement(tv_free_text_2, catalog.categories[0].items[num].freeText2);
			}
			if(catalog.categories[0].items[num].leafletTermCond != null){
				checkVisible(tv_term_conditions.As<Ranorex.Unknown>(), true);
			}
			if(catalog.categories[0].items[num].freeText3 != null){
				checkElement(tv_free_text_3, catalog.categories[0].items[num].freeText3);
			}
			if(catalog.categories[0].items[num].brandLogo1 != null){
				checkVisible(img_brand_logo_1.As<Ranorex.Unknown>(), true);
			}
			if(catalog.categories[0].items[num].brandLogo2 != null){
				checkVisible(img_brand_logo_2.As<Ranorex.Unknown>(), true);
			}
			if(catalog.categories[0].items[num].brandLogo3 != null){
				checkVisible(img_brand_logo_3.As<Ranorex.Unknown>(), true);
			}
		}
		
		public void checkListContainer(Ranorex.Container cont, int num)
		{
			if(catalog.categories[0].items[num].promoTitle != null){
				checkElement(tv_title, catalog.categories[0].items[num].promoTitle);
			}
			if(catalog.categories[0].items[num].promoDescription != null){
				checkElement(tv_quantity, catalog.categories[0].items[num].promoDescription);
			}
			if(catalog.categories[0].items[num].promoPicture != null){
				checkVisible(img_promotion.As<Ranorex.Unknown>(), true);
			}
			if(catalog.categories[0].items[num].promoPrice != null){
				checkElement(tv_price_integer, catalog.categories[0].items[num].promoPrice.integer + "");
				if(catalog.categories[0].items[num].promoPrice.fraction != 0){
					checkElement(tv_price_decimal, catalog.categories[0].items[num].promoPrice.fraction + "");
				}else{
					checkElement(tv_price_decimal, "00");
				}
			}
			if(catalog.categories[0].items[num].promoPercentage != null){
				checkElement(tv_percentage, catalog.categories[0].items[num].promoPercentage);
			}
			if(catalog.categories[0].items[num].promoHighlight != null){
				checkElement(tv_quantity, catalog.categories[0].items[num].promoHighlight);
			}
			if(catalog.categories[0].items[num].promoMainRow2 != null){
				checkElement(tv_price_main_row_2, catalog.categories[0].items[num].promoMainRow2);
			}
			if(catalog.categories[0].items[num].promoMainRow3 != null){
				checkElement(tv_price_main_row_3, catalog.categories[0].items[num].promoMainRow3);
			}
			checkVisible(img_price_spar_plus.As<Ranorex.Unknown>(), catalog.categories[0].items[num].sparPlus);
			if(catalog.categories[0].items[num].promoInfoBottom1 != null){
				checkElement(price_bottom_info_top, catalog.categories[0].items[num].promoInfoBottom1);
			}
			if(catalog.categories[0].items[num].promoInfoBottom2 != null){
				checkElement(price_bottom_info_bottom, catalog.categories[0].items[num].promoInfoBottom2);
			}
			if(catalog.categories[0].items[num].promoValidFrom != null && catalog.categories[0].items[num].promoValidTo != null){
				
				System.DateTime startDate = Convert.ToDateTime(catalog.categories[0].items[num].promoValidFrom);
				System.DateTime endDate = Convert.ToDateTime(catalog.categories[0].items[num].promoValidTo);
				
				checkExpiredDate(startDate,endDate);
			}
		}
		
		public bool checkExpiredDate(System.DateTime startDate, System.DateTime endDate)
		{
			System.DateTime currentDate = new System.DateTime();
			
			if(currentDate >= startDate && currentDate < endDate)
			{
				checkVisible(tv_expired.As<Ranorex.Unknown>(), false);
				checkVisible(btn_add.As<Ranorex.Unknown>(), true);
				return true;
			}
			else
			{
				checkVisible(tv_expired.As<Ranorex.Unknown>(), true);
				checkVisible(btn_add.As<Ranorex.Unknown>(), false);
				return false;
			}
		}
		
		public void checkElement(Ranorex.Text element, string param)
		{
			if(param != null){
				if(element.Visible)
				{
					Report.Log(ReportLevel.Success, "Success", "Element " + element + " is displayed");
					
					if(element.TextValue.Equals(param))
					{
						Report.Log(ReportLevel.Success, "Success", "Element " + element + " contains proper data");
					}
					else
					{
						Report.Log(ReportLevel.Warn, "Failure", "Element " + element + " doesn't contain proper data");
					}
				}
				else
				{
					Report.Log(ReportLevel.Warn, "Failure", "Element " + element + " is NOT displayed");
				}
			}
		}
		
		public void checkVisible(Ranorex.Unknown element, bool param)
		{
			if(param){
				if(element.Visible)
				{
					Report.Log(ReportLevel.Success, "Success", "Element " + element + " is displayed");
				}
				else
				{
					Report.Log(ReportLevel.Warn, "Failure", "Element " + element + " is NOT displayed");
				}
			}else
			{
				if(element.Visible)
				{
					Report.Log(ReportLevel.Warn, "Failure", "Element " + element + " IS displayed");
				}
				else
				{
					Report.Log(ReportLevel.Success, "Success", "Element " + element + " is not displayed");
				}
			}
			
		}
		
		public void retrieveElementsFromListView(Ranorex.Container cont)
		{
			try{
				
				IList<Unknown> children = cont.Children;
				tv_expired = children[1].As<Ranorex.Text>();
				tv_title = children[0].FindChild<Ranorex.Text>();
				tv_quantity = children[0].FindChildren<Ranorex.Text>()[1];
				btn_add = children[0].FindChildren<Ranorex.Text>()[2];
				
				IList<Unknown> price = children[0].Children[0].Children;
				img_promotion = price[0].As<Ranorex.Picture>();
				
				IList<Unknown> mainPrice = price[1].Children[0].Children[0].Children;
				fullPrice = mainPrice[0].As<Ranorex.Container>();
				price_bottom_info_top = mainPrice[1].As<Ranorex.Text>();
				price_bottom_info_bottom = mainPrice[2].As<Ranorex.Text>();
				img_price_spar_plus = mainPrice[3].As<Ranorex.Picture>();
				
				tv_price_main_row_2 = fullPrice.FindChildren<Ranorex.Text>()[0];
				tv_price_prefix = fullPrice.FindChildren<Ranorex.Text>()[1];
				tv_percentage = fullPrice.FindChildren<Ranorex.Text>()[2];
				tv_price_main_row_3 = fullPrice.FindChildren<Ranorex.Text>()[3];
				tv_price_info_bottom_1 = fullPrice.FindChildren<Ranorex.Text>()[4];
				Ranorex.AndroidElement price_layout = fullPrice.Children[2].As<Ranorex.AndroidElement>();
				
				tv_price_integer = price_layout.Children[0].Children[0].FindChildren<Ranorex.Text>()[0];
				tv_price_decimal = price_layout.Children[0].Children[0].FindChildren<Ranorex.Text>()[1];
				
				tv_highlight = price[1].Children[1].FindChildren<Ranorex.Text>()[0];
			}
			catch(System.Exception e)
			{
				Report.Log(ReportLevel.Error, "Error", e.Message);
			}
		}
		
		public void retrieveElementsFromDetailsView()
		{
			try{
				Ranorex.Container cont = repo.PlusSparSi.MainActivity.MainItemData;
				
				IList<Ranorex.Unknown> level1 = cont.Children;
				Ranorex.Container level21 = cont.Children[0].As<Ranorex.Container>();
				Ranorex.AndroidElement level23 = cont.Children[3].As<Ranorex.AndroidElement>();
				Ranorex.Container level24 = cont.Children[6].As<Ranorex.Container>();
				Ranorex.Container level25 = cont.Children[8].As<Ranorex.Container>();
				
				tv_free_text_1 = cont.FindChildren<Ranorex.Text>()[1];
				tv_free_text_2 = cont.FindChildren<Ranorex.Text>()[2];
				tv_free_text_3 = cont.FindChildren<Ranorex.Text>()[3];
				
				tv_title = level21.Children[0].FindChild<Ranorex.Text>();
				img_picture = level21.Children[0].Children[0].FindChild<Ranorex.Picture>();
				tv_expired = level21.Children[0].Children[0].FindChild<Ranorex.Text>();
				tv_highlight = level21.Children[0].Children[0].Children[1].Children[0].FindChild<Ranorex.Text>();
				
				Ranorex.Container level31 = level21.Children[0].Children[0].Children[1].Children[1].Children[0].As<Ranorex.Container>();
				tv_price_main_row_1 = level31.Children[0].As<Ranorex.Text>();
				tv_price_main_row_2 = level31.Children[1].As<Ranorex.Text>();
				tv_price_prefix = level31.Children[2].As<Ranorex.Text>();
				tv_percentage = level31.Children[4].As<Ranorex.Text>();
				tv_price_main_row_3 = level31.Children[7].As<Ranorex.Text>();
				tv_price_info_bottom_1 = level31.Children[8].As<Ranorex.Text>();
				
				tv_quantity = level21.Children[0].Children[2].FindChild<Ranorex.Text>();
				img_brand_logo_1 = level21.Children[0].Children[3].FindChildren<Ranorex.Picture>()[0];
				img_brand_logo_2 = level21.Children[0].Children[3].FindChildren<Ranorex.Picture>()[1];
				img_brand_logo_3 = level21.Children[0].Children[3].FindChildren<Ranorex.Picture>()[2];
				
				tv_stores_type_1 = level23.FindChildren<Ranorex.Text>()[0];
				tv_stores_type_2 = level23.FindChildren<Ranorex.Text>()[1];
				tv_stores_type_3 = level23.FindChildren<Ranorex.Text>()[2];
				
				tv_term_conditions = level24.FindChildren<Ranorex.Text>()[1];
				
				btn_share = level25.FindChildren<Ranorex.Text>()[0];
				btn_add = level25.FindChildren<Ranorex.Text>()[1];
			}
			catch(System.Exception e)
			{
				Report.Log(ReportLevel.Error, "Error", e.Message);
			}
			
		}
		
		public void MockCatalog()
		{
			catalog.categories = new List<Category>();
			catalog.categories.Add(new Category(0, "Meso, mesni izdelki in ribe", new List<Item>()));
			catalog.categories[0].items.Add(new Item());
			catalog.categories[0].items[0].id = 1;
			catalog.categories[0].items[0].promoTitle = "Negroni Mortadela Bologna";
			catalog.categories[0].items[0].promoPicture = "http://various-sasose.rhcloud.com/spar/images/PromotionMortadela.png";
			catalog.categories[0].items[0].promoDescription = "500g, kos";
			catalog.categories[0].items[0].promoPrice = new PromoPrice();
			catalog.categories[0].items[0].promoPrice.integer = 4;
			catalog.categories[0].items[0].promoPrice.fraction = 39;
			catalog.categories[0].items[0].promoInfoBottom1 = "20% več";
			catalog.categories[0].items[0].promoInfoBottom2 = "za isto ceno";
			catalog.categories[0].items[0].promoValidFrom = "2017-01-16T00:00:00+01:00";
			catalog.categories[0].items[0].promoValidTo = "2017-02-18T23:59:59+01:00";
			catalog.categories[0].items[0].freeText1 = "Dodaten text in opis kadar je to potrebno";
			catalog.categories[0].items[0].freeText2 = "Ne velja za XXL izdelke";
			catalog.categories[0].items[0].freeText3 = "Vsebuje gluten, zeleno, kamilice…";
			catalog.categories[0].items[0].leafletTermCond = "https://www.spar-klub.si/pogoji-uporabe";
			catalog.categories[0].items[0].brandLogo1 = "http://various-sasose.rhcloud.com/spar/images/BrandLogoSpar.png";
			catalog.categories[0].items[0].brandLogo2 = "http://various-sasose.rhcloud.com/spar/images/BrandLogoSpar.png";
			catalog.categories[0].items[0].brandLogo3 = "http://various-sasose.rhcloud.com/spar/images/BrandLogoSpar.png";
			catalog.categories[0].items[0].storesType1 = true;
			catalog.categories[0].items[0].storesType2 = true;
			catalog.categories[0].items[0].storesType3 = true;
			catalog.categories[0].items[0].shareable = true;
			
			catalog.categories[0].items.Add(new Item());
			catalog.categories[0].items[1].id = 2;
			catalog.categories[0].items[1].promoTitle = "Negroni Mortadela Bologna";
			catalog.categories[0].items[1].promoPicture = "http://various-sasose.rhcloud.com/spar/images/PromotionMortadela.png";
			catalog.categories[0].items[1].promoDescription = "500g, kos";
			catalog.categories[0].items[1].promoPrice = new PromoPrice();
			catalog.categories[0].items[1].promoPrice.integer = 4;
			catalog.categories[0].items[1].promoValidFrom = "2017-01-16T00:00:00+01:00";
			catalog.categories[0].items[1].promoValidTo = "2017-02-18T23:59:59+01:00";
			catalog.categories[0].items[1].freeText1 = "Dodaten text in opis kadar je to potrebno";
			catalog.categories[0].items[1].freeText2 = "Ne velja za XXL izdelke";
			catalog.categories[0].items[1].freeText3 = "Vsebuje gluten ,pšenica, rž, ječmen, oves, pira, kamut, jajca, arašidi, soja, mleko, mandlji, lešniki, indijski oreški, ameriški orehi, brazilski oreški, pistacija, makadamija, ribe, raki, mehkužci, zelena, gorčično seme, sezamovo seme, volčji bob, žveplov dioksid, sulfiti.";
			catalog.categories[0].items[1].leafletTermCond = "https://www.spar-klub.si/pogoji-uporabe";
			catalog.categories[0].items[1].brandLogo1 = "http://various-sasose.rhcloud.com/spar/images/BrandLogoSpar.png";
			catalog.categories[0].items[1].storesType1 = true;
			catalog.categories[0].items[1].storesType2 = true;
			catalog.categories[0].items[1].storesType3 = false;
			catalog.categories[0].items[1].shareable = true;
			
			catalog.categories[0].items.Add(new Item());
			catalog.categories[0].items[2].id = 3;
			catalog.categories[0].items[2].promoTitle = "Negroni Mortadela Bologna";
			catalog.categories[0].items[2].promoPicture = "http://various-sasose.rhcloud.com/spar/images/PromotionMortadela.png";
			catalog.categories[0].items[2].promoDescription = "500g, kos";
			catalog.categories[0].items[2].promoPrice = new PromoPrice();
			catalog.categories[0].items[2].promoPrice.integer = 4;
			catalog.categories[0].items[2].promoPrice.fraction = 39;
			catalog.categories[0].items[2].promoInfoBottom1 = "-30%";
			catalog.categories[0].items[2].promoMainRow2 = "5,11€";
			catalog.categories[0].items[2].promoMainRow2Striked = true;
			catalog.categories[0].items[2].promoValidFrom = "2017-01-16T00:00:00+01:00";
			catalog.categories[0].items[2].promoValidTo = "2017-02-19T23:59:59+01:00";
			catalog.categories[0].items[2].freeText1 = "Dodaten text in opis kadar je to potrebno";
			catalog.categories[0].items[2].freeText2 = "Ne velja za XXL izdelke";
			catalog.categories[0].items[2].freeText3 = "Vsebuje gluten, zeleno, kamilice…";
			catalog.categories[0].items[2].leafletTermCond = "https://www.spar-klub.si/pogoji-uporabe";
			catalog.categories[0].items[2].brandLogo1 = "http://various-sasose.rhcloud.com/spar/images/BrandLogoSpar.png";
			catalog.categories[0].items[2].storesType1 = false;
			catalog.categories[0].items[2].storesType2 = true;
			catalog.categories[0].items[2].storesType3 = false;
			catalog.categories[0].items[2].shareable = true;
			
			Item item4 = new Item();
			item4.id = 4;
			item4.promoTitle = "Negroni Mortadela Bologna";
			item4.promoPicture = "http://various-sasose.rhcloud.com/spar/images/PromotionMortadela.png";
			item4.promoDescription = "500g, kos";
			item4.promoPrice = new PromoPrice();
			item4.promoPrice.integer = 4;
			item4.promoPrice.fraction = 39;
			item4.promoInfoBottom1 = "-30%";
			item4.promoMainRow2 = "5,11€";
			item4.promoMainRow2Striked = true;
			item4.promoValidFrom = "2017-01-16T00:00:00+01:00";
			item4.promoValidTo = "2017-02-20T23:59:59+01:00";
			item4.freeText1 = "Dodaten text in opis kadar je to potrebno";
			item4.freeText2 = "Ne velja za XXL izdelke";
			item4.freeText3 = "Vsebuje gluten, zeleno, kamilice…";
			item4.leafletTermCond = "https://www.spar-klub.si/pogoji-uporabe";
			item4.brandLogo1 = "http://various-sasose.rhcloud.com/spar/images/BrandLogoSpar.png";
			item4.storesType1 = true;
			item4.storesType2 = true;
			item4.shareable = false;
			catalog.categories[0].items.Add(item4);
			
			Item item = new Item();
			item.id = 5;
			item.promoTitle = "Negroni Mortadela Bologna";
			item.promoPicture = "http://various-sasose.rhcloud.com/spar/images/PromotionMortadela.png";
			item.promoDescription = "500g, kos";
			item.promoPrice = new PromoPrice();
			item.promoPrice.integer = 4;
			item.promoPrice.fraction = 39;
			item.promoInfoBottom1 = "-30%";
			item.promoMainRow2 = "5,11€";
			item.promoMainRow2Striked = true;
			item.promoValidFrom = "2017-01-16T00:00:00+01:00";
			item.promoValidTo = "2017-02-21T23:59:59+01:00";
			item.freeText1 = "Dodaten text in opis kadar je to potrebno";
			item.freeText2 = "Ne velja za XXL izdelke";
			item.freeText3 = "Vsebuje gluten, zeleno, kamilice…";
			item.leafletTermCond = "https://www.spar-klub.si/pogoji-uporabe";
			item.brandLogo1 = "http://various-sasose.rhcloud.com/spar/images/BrandLogoSpar.png";
			item.storesType1 = true;
			item.storesType2 = true;
			item.shareable = true;
			catalog.categories[0].items.Add(item);
			
			item = new Item();
			item.id = 6;
			item.promoTitle = "Negroni Mortadela Bologna";
			item.promoPicture = "http://various-sasose.rhcloud.com/spar/images/PromotionMortadela.png";
			item.promoDescription = "• 4-taktni bencinski motor Loncin E-start 212 cm³\n• moč motorja 4.4 kW (5.9 KM)\n• električni in ročni zagon\n• 6 prestav naprej in 2 vzvratno\n• delovna širina 61 cm \n• višina 51 cm \n• daljina odmetavanja snega 8–15 m\n• kapaciteta 1220 m²/uro, dvostopenjska, teža 78 kg";
			item.promoPrice = new PromoPrice();
			item.promoPrice.integer = 2;
			item.promoPrice.fraction = 0;
			item.promoHighlight = "VEČ JE CENEJE";
			item.promoInfoBottom1 = "-30%";
			item.promoMainRow1 = "Ob nakupu";
			item.promoMainRow1Striked = false;
			item.promoMainRow2 = "2 ali več:";
			item.promoMainRow2Striked = false;
			item.promoMainRow3 = "1 kos: 5,11€";
			item.promoMainRow3Striked = false;
			item.promoValidFrom = "2017-01-16T00:00:00+01:00";
			item.promoValidTo = "2017-02-05T23:59:59+01:00";
			item.freeText1 = "Dodaten text in opis kadar je to potrebno";
			item.freeText2 = "Ne velja za XXL izdelke";
			item.freeText3 = "Vsebuje gluten, zeleno, kamilice…";
			item.leafletTermCond = "https://www.spar-klub.si/pogoji-uporabe";
			item.brandLogo1 = "http://various-sasose.rhcloud.com/spar/images/BrandLogoSpar.png";
			item.storesType1 = true;
			item.storesType2 = true;
			item.storesType3 = true;
			item.shareable = true;
			catalog.categories[0].items.Add(item);
			
			item = new Item();
			item.id = 7;
			item.promoTitle = "Negroni Mortadela Bologna";
			item.promoPicture = "http://various-sasose.rhcloud.com/spar/images/PromotionMortadela.png";
			item.promoDescription = "500g, kos";
			item.promoPrice = new PromoPrice();
			item.promoPrice.integer = 2;
			item.promoPrice.fraction = 39;
			item.promoHighlight = "VEČ JE CENEJE";
			item.promoInfoBottom1 = "-30%";
			item.promoMainRow1 = "Ob nakupu";
			item.promoMainRow1Striked = false;
			item.promoMainRow2 = "2 ali več:";
			item.promoMainRow2Striked = false;
			item.promoMainRow3 = "1 kos: 5,11€";
			item.promoMainRow3Striked = false;
			item.sparPlus = true;
			item.promoValidFrom = "2017-01-16T00:00:00+01:00";
			item.promoValidTo = "2017-02-23T23:59:59+01:00";
			item.freeText1 = "Dodaten text in opis kadar je to potrebno";
			item.freeText2 = "Ne velja za XXL izdelke";
			item.freeText3 = "Vsebuje gluten, zeleno, kamilice…";
			item.leafletTermCond = "https://www.spar-klub.si/pogoji-uporabe";
			item.brandLogo1 = "http://various-sasose.rhcloud.com/spar/images/BrandLogoSpar.png";
			item.storesType1 = true;
			item.storesType2 = true;
			catalog.categories[0].items.Add(item);
			
			item = new Item();
			item.id = 8;
			item.promoTitle = "Negroni Mortadela Bologna";
			item.promoPicture = "http://various-sasose.rhcloud.com/spar/images/PromotionMortadela.png";
			item.promoDescription = "500g, kos";
			item.promoPercentage = "-30%";
			item.sparPlus = true;
			item.promoValidFrom = "2017-01-16T00:00:00+01:00";
			item.promoValidTo = "2017-02-24T23:59:59+01:00";
			item.freeText1 = "Dodaten text in opis kadar je to potrebno";
			item.freeText2 = "Ne velja za XXL izdelke";
			item.freeText3 = "Vsebuje gluten, zeleno, kamilice…";
			item.leafletTermCond = "https://www.spar-klub.si/pogoji-uporabe";
			item.brandLogo1 = "http://various-sasose.rhcloud.com/spar/images/BrandLogoSpar.png";
			item.storesType1 = true;
			item.storesType2 = true;
			catalog.categories[0].items.Add(item);
			
			item = new Item();
			item.id = 9;
			item.promoTitle = "Negroni Mortadela Bologna";
			item.promoPicture = "http://various-sasose.rhcloud.com/spar/images/PromotionMortadela.png";
			item.promoDescription = "500g, kos";
			item.promoPercentage = "-30%";
			item.promoValidFrom = "2017-01-16T00:00:00+01:00";
			item.promoValidTo = "2017-02-24T23:59:59+01:00";
			item.freeText1 = "Dodaten text in opis kadar je to potrebno";
			item.freeText2 = "Ne velja za XXL izdelke";
			item.freeText3 = "Vsebuje gluten, zeleno, kamilice…";
			item.leafletTermCond = "https://www.spar-klub.si/pogoji-uporabe";
			item.brandLogo1 = "http://various-sasose.rhcloud.com/spar/images/BrandLogoSpar.png";
			item.storesType1 = true;
			item.storesType2 = true;
			catalog.categories[0].items.Add(item);
			
			item = new Item();
			item.id = 10;
			item.promoTitle = "Negroni Mortadela Bologna";
			item.promoPicture = "http://various-sasose.rhcloud.com/spar/images/PromotionMortadela.png";
			item.promoDescription = "500g, kos";
			item.promoPrice = new PromoPrice();
			item.promoPrice.integer = 4;
			item.promoPrice.fraction = 39;
			item.promoHighlight = "1+1 GRATIS";
			item.promoMainRow2 = "2 kosa";
			item.promoMainRow2Striked = false;
			item.promoMainRow3 = "1 kos: 5,11€";
			item.promoMainRow3Striked = false;
			item.sparPlus = true;
			item.promoValidFrom = "2017-01-16T00:00:00+01:00";
			item.promoValidTo = "2017-02-26T23:59:59+01:00";
			item.freeText1 = "Dodaten text in opis kadar je to potrebno";
			item.freeText2 = "Ne velja za XXL izdelke";
			item.freeText3 = "Vsebuje gluten, zeleno, kamilice…";
			item.leafletTermCond = "https://www.spar-klub.si/pogoji-uporabe";
			item.brandLogo1 = "http://various-sasose.rhcloud.com/spar/images/BrandLogoSpar.png";
			item.storesType1 = true;
			item.storesType2 = true;
			catalog.categories[0].items.Add(item);
		}
	}
}
