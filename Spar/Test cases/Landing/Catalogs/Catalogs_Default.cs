///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Spar.Test_cases.Landing.Catalogs
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Catalogs_Default recording.
    /// </summary>
    [TestModule("1bee34a3-d4bb-4d1b-9592-1f6a7c28a49e", ModuleType.Recording, 1)]
    public partial class Catalogs_Default : ITestModule
    {
        /// <summary>
        /// Holds an instance of the Spar.SparRepository repository.
        /// </summary>
        public static Spar.SparRepository repo = Spar.SparRepository.Instance;

        static Catalogs_Default instance = new Catalogs_Default();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Catalogs_Default()
        {
            CatalogTitle = "";
            CatalogTime = "";
            FirstSection = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Catalogs_Default Instance
        {
            get { return instance; }
        }

#region Variables

        string _CatalogTitle;

        /// <summary>
        /// Gets or sets the value of variable CatalogTitle.
        /// </summary>
        [TestVariable("d44a0151-b3f5-4344-8a74-96311ce76a76")]
        public string CatalogTitle
        {
            get { return _CatalogTitle; }
            set { _CatalogTitle = value; }
        }

        string _CatalogTime;

        /// <summary>
        /// Gets or sets the value of variable CatalogTime.
        /// </summary>
        [TestVariable("503eec2f-05ee-4f07-aad6-05d74632162f")]
        public string CatalogTime
        {
            get { return _CatalogTime; }
            set { _CatalogTime = value; }
        }

        string _FirstSection;

        /// <summary>
        /// Gets or sets the value of variable FirstSection.
        /// </summary>
        [TestVariable("6b8f60d8-4114-49f8-b62a-ae81582f6f3b")]
        public string FirstSection
        {
            get { return _FirstSection; }
            set { _FirstSection = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'Text' from item 'PlusSparSi.MainActivity.CatalogOrSectionTitle' and assigning its value to variable 'CatalogTitle'.", repo.PlusSparSi.MainActivity.CatalogOrSectionTitleInfo, new RecordItemIndex(0));
            CatalogTitle = repo.PlusSparSi.MainActivity.CatalogOrSectionTitle.Element.GetAttributeValueText("Text");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'Text' from item 'PlusSparSi.MainActivity.TvDate' and assigning its value to variable 'CatalogTime'.", repo.PlusSparSi.MainActivity.TvDateInfo, new RecordItemIndex(1));
            CatalogTime = repo.PlusSparSi.MainActivity.TvDate.Element.GetAttributeValueText("Text");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PlusSparSi.MainActivity.BtnBrowse' at Center", repo.PlusSparSi.MainActivity.BtnBrowseInfo, new RecordItemIndex(2));
            repo.PlusSparSi.MainActivity.BtnBrowse.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$CatalogTitle) on item 'PlusSparSi.MainActivity.RStringTabTitle'.", repo.PlusSparSi.MainActivity.RStringTabTitleInfo, new RecordItemIndex(3));
            Validate.Attribute(repo.PlusSparSi.MainActivity.RStringTabTitleInfo, "Text", CatalogTitle);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$CatalogTime) on item 'PlusSparSi.MainActivity.RStringTabSubTitle'.", repo.PlusSparSi.MainActivity.RStringTabSubTitleInfo, new RecordItemIndex(4));
            Validate.Attribute(repo.PlusSparSi.MainActivity.RStringTabSubTitleInfo, "Text", CatalogTime);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'Text' from item 'PlusSparSi.MainActivity.SlidingTabLayout_FirstButtonText' and assigning its value to variable 'FirstSection'.", repo.PlusSparSi.MainActivity.SlidingTabLayout_FirstButtonTextInfo, new RecordItemIndex(5));
            FirstSection = repo.PlusSparSi.MainActivity.SlidingTabLayout_FirstButtonText.Element.GetAttributeValueText("Text");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$FirstSection) on item 'PlusSparSi.MainActivity.CatalogOrSectionTitle'.", repo.PlusSparSi.MainActivity.CatalogOrSectionTitleInfo, new RecordItemIndex(6));
            Validate.Attribute(repo.PlusSparSi.MainActivity.CatalogOrSectionTitleInfo, "Text", FirstSection);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
