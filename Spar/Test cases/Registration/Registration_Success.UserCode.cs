///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace Spar.Test_cases.Registration
{
	public partial class Registration_Success
	{
		/// <summary>
		/// This method gets called right after the recording has been started.
		/// It can be used to execute recording specific initialization code.
		/// </summary>
		/// 
		String ID = null;
		
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

		public void Set_Value_EtEmail(RepoItemInfo textInfo)
		{
			StreamReader inputStream;
			try
			{
				inputStream = new StreamReader(File.OpenRead("RegistrationLog.csv"));
				
				String data = File.ReadLines("RegistrationLog.csv").Last(); // Read last line
				String[] values = data.Split(','); // Split the line to an array

				ID = values[0];
				ID = (int.Parse(ID) + 1) + "";
				
				String[] emailSplit = Email.Split('@');
				Email = emailSplit[0] + ID + "@" + emailSplit[1];
				
				Report.Log(ReportLevel.Info, "Email", Email);
				Report.Log(ReportLevel.Info, "ID", ID);
				
				Report.Log(ReportLevel.Info, "Set Value", "Setting attribute Text to '$Email' on item 'textInfo'.", textInfo);
				textInfo.FindAdapter<Text>().Element.SetAttributeValue("Text", Email);
				
				inputStream.Close();
				
			}catch (Exception e)
			{
				Report.Log(ReportLevel.Error, "Email: " + Email, e.Message);
			}
			
		}

		public void Validate_LoginEmailSentActivity(RepoItemInfo formInfo)
		{
			Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'formInfo'.", formInfo);
			Validate.Attribute(formInfo, "Visible", "True");
			
			if(repo.PlusSparSi.LoginEmailSentActivity.Self.Visible == true){

				using(StreamWriter sw = new StreamWriter(new FileStream("RegistrationLog.csv", FileMode.Append, FileAccess.Write), Encoding.UTF8)){
					
					sw.WriteLine(ID + "," +
					             Name + "," +
					             Surname + "," +
					             DateOfBirth + "," +
					             Country + "," +
					             Address + "," +
					             HouseNumber + "," +
					             PostalNumber + "," +
					             City + "," +
					             PhoneNumber + "," +
					             Email + "," +
					             Password + "," +
					             "Success");
					sw.Close();
				}
			}

		}

        public void Set_Value_EtPhoneNumber(RepoItemInfo textInfo)
        {
        	Random r = new Random();
        	int num = r.Next(0,1000000);
        	
        	PhoneNumber = "+38640" + num.ToString("000000");
        	
            Report.Log(ReportLevel.Info, "Set Value", "Setting attribute Text to '$PhoneNumber' on item 'textInfo'.", textInfo);
            textInfo.FindAdapter<Text>().Element.SetAttributeValue("Text", PhoneNumber);
            
            
        }

	}
}
